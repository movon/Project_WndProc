<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>


    <% include templates/headheader.ejs%>
    <link href="/stylesheets/guides.css" rel="stylesheet">
</head>
<body>

<% include templates/firstbodyheader.ejs%>

<h1>Guide 0x0 - The basics</h1>
<h2>Introduction</h2>
<pre>
    INSERT DIGGING HERE
    This will teach you how to build a game in assembly using basic win32 graphic libraries.
    You need to know assembly (16 or 32 bit) in order to fully understand this guide.
    Learn from MSDN, learn from winprog, learn from stuff, improvise.
</pre>
<h2>Setting up the environment</h2>
<pre>
    We will work in Visual Studio, and use Masm to assemble.
    So download both of these (<a href="https://www.visualstudio.com/" style="color: blue">Visual Studio community</a> and the normal <a href="http://www.masm32.com/masmdl.htm" style="color: blue">Masm</a>).
    Now open Visual Studio, create a new C++ empty project.
    At the right side of the screen there should be a solution explorer window.
    At the solution explorer, right click your project (not the solution, the one below it) click "Build Dependencies" then "Build costumization"
    Mark Masm then click ok. You can now create your asm source file. Right click the source files directory in the solution explorer,
    then Add -> New Item -> Visual c++ -> C++ File -> Change the name of the file extension from .cpp to .asm then click add.
    Now a few more configurations. Right click your project -> Propertries -> Linker -> System -> Change SubSystem to Windows.
    Then go to Linker -> Advanced -> Go to the bottom of the page and Set "Image Has Safe Exception Handlers" to No.
</pre>
<h2>Starting to write code</h2>
<pre>
    Now we can start writing code.
    First, you should tell the assembler a few stuff.
    <pre>
      .486                                      ; create 32 bit code
      .model flat, stdcall                      ; 32 bit memory model
      option casemap :none                      ; case sensitive
    </pre>
    The first line means that you are gonna use the .486 Intel standard commands.
    The second line means that we are using 32 bit flat memory model
    The third line means that our code will be case sensitive which mean the variable "num" isn't the variable "Num".


    Secondly, <b>lets include some shit.</b>
    Add this at the top of your code, just below the first three lines (You can leave a few lines spaced out for the code to look fancier)
    <pre>
            include \masm32\include\windows.inc
            include \masm32\include\kernel32.inc
            include \masm32\include\user32.inc
            include \masm32\include\gdi32.inc
            include \masm32\include\Advapi32.inc
            include \masm32\include\winmm.inc
            include \masm32\include\dialogs.inc       ; macro file for dialogs
            include \masm32\macros\macros.asm         ; masm32 macro file
            includelib \masm32\lib\winmm.lib
            includelib \masm32\lib\gdi32.lib
            includelib \masm32\lib\user32.lib
            includelib \masm32\lib\kernel32.lib
            includelib \masm32\lib\Comctl32.lib
            includelib \masm32\lib\comdlg32.lib
            includelib \masm32\lib\shell32.lib
            includelib \masm32\lib\oleaut32.lib
            includelib \masm32\lib\ole32.lib
            includelib \masm32\lib\msvcrt.lib
    </pre>
    If you read what you just copied, you noticed that for each library, there are:
        1. inc file: The curious reader who will open them will find tons of definitions for constants and functions. This file is included as a sort of a header using the "include" command.
        2. lib file: This file is full of binary shit. Don't even try to read it. Basically its just machine code which relates to the header file.
    Most of those libraries are mandatory for you to start working, as there are many cool functions in all of them which we will use later.
    A task for you guys at home will be to find out which libraries are not necessary for your project. If you do, comment them out using the ";" sign since you might need them later on.
</pre>
<h2>The segments</h2>
<pre>
    Because assembly is such a great language, that likes order, you must divide your code into segments.
    Your mark a segment by putting a dot before its name, everything after that is in that segment, until another segment opens.
    <h3>The const segment</h3>
    The first segment that we will talk about is the const segment. It does pretty much as you would expect - it defines constants.
    In assembly, we define constants by using the "equ" keyword between the constant name and the constant value.
    The convention for constants in assembly is similar to other languages: all caps separated by underscores.
    like this: CONST_NAME equ CONST_VALUE
    For now, we will use the const segment for defining our window height and width.
    The best practice when programming is to use constants. It helps other people understand what we meant when we wrote a random number in our code,
    it helps us understand our code in the future, and makes changing constants much, much easier.
    For now, our const segment will look like this:
    <pre>
        .const
            WINDOW_WIDTH    equ     800
            WINDOW_HEIGHT   equ     600
    </pre>

    <h3>The data segment</h3>
    The data segment is used for declaring variables.
    In assembly we declare variables like this:
    VARIABLE_NAME variable_size VARIABLE_INITIAL_VALUE
    the variable size should be one of those: db (define byte), dw (define word), dd (define double word), or any other variable type,
    for example types windows has provided us when we included their libraries.
    For now, our data segment will look like this:
    <pre>
        ClassName       DB      "TheClass",0
        windowTitle     DB      "A Game!",0
    </pre>
    This is a way of defining strings - we will get into it more later, but for now, you should know that a string is just an array of bytes, which are ASCII codes that present characters.
    If you are curious, read about ASCII encoding. Another important thing to understand is that in order to let programs know where you string ends, you should end it with the NULL character which is 0.

    <h3>The code segment</h3>
    Now we will talk about the code segment - my favorite one.
    This is where we will write all of our great, beautiful code.
    The code segment must contain a main function, which is where the execution starts.
    As of now, our code segment will look like this:
    <pre>
        .code
        main PROC
            invoke ExitProcess, 0 ;(This is a comment.) This is a windows function that comes from our Kernel32 include.
                                  ; The curious reader will go to MSDN and read more about this function.
        main ENDP
        end main
    </pre>
    notice the "end main" at the end of the code. We must have that line, as a directive to signal that the main function code ended.
</pre>
<% include templates/previousAndNextButtons.ejs%>
<% include templates/secondbodyheader.ejs%>
</body>
</html>
